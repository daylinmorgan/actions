# based off of https://raw.githubusercontent.com/nim-lang/langserver/1b9b0fbd87a7868622fdb5a7cb162976a9dc6446/.github/workflows/binaries.yml
name: 👑 ⚙️ Build Nim Binaries

on:
  push:
    tags:
    - 'v*' # "v1.2.3"
  workflow_call:
    inputs:
      binDir:
        type: string
        description: path to bin output dir
      module:
        type: string
        required: true
        description: name of module
      os:
        type: string
        required: true
      triple:
        type: string
        required: true
      name:
        type: string
        required: true
      cpu:
        type: string
        required: true
      nim_cpu:
        type: string
        required: true
      nimble_cpu:
        type: string
        required: true
      archive_format:
        type: string
        required: true
      builder:
        type: string
        required: true


jobs:
  build:
    defaults:
      run:
        shell: bash

    name: '${{ inputs.triple }}'
    runs-on: '${{ inputs.builder }}'
    steps:
      - name: Setup Build
        if: inputs.builder == 'ubuntu-20.04'
        run: |
          sudo apt install gcc make \
            gcc-aarch64-linux-gnu \
            binutils-aarch64-linux-gnu \
            gcc-i686-linux-gnu \
            binutils-i686-linux-gnu \
            mingw-w64

      - name: Setup mingw32
        if: inputs.triple == 'i686-w32-mingw32'
        run: |
          curl -LSsO https://github.com/brechtsanders/winlibs_mingw/releases/download/11.1.0-12.0.0-8.0.2-r1/winlibs-i686-posix-dwarf-gcc-11.1.0-mingw-w64-8.0.2-r1.7z
          echo "588794e11be36389501610cf78de777e52a920e03db256ee8bd1a7c2c45e39a4 winlibs-i686-posix-dwarf-gcc-11.1.0-mingw-w64-8.0.2-r1.7z" | sha256sum -c
          7z x winlibs-i686-posix-dwarf-gcc-11.1.0-mingw-w64-8.0.2-r1.7z C:\\
          echo "C:\\mingw32\\bin" >> $GITHUB_PATH

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Nimble
        uses: nim-lang/nimble/.github/actions/install_nimble@master
        with:
          os: ${{ inputs.name }}
          cpu: ${{ inputs.nimble_cpu }}

      - name: Restore nimble dependencies from cache
        id: nimble_deps
        uses: actions/cache@v4
        with:
          path: ~/.nimble/
          key: ${{ inputs.os }}-${{ env.cache_nonce }}

      - name: Build ${{ inputs.module }}
        run: |
          echo i386.linux.gcc.exe = \"i686-linux-gnu-gcc\" >> nim.cfg
          echo i386.linux.gcc.linkerexe = \"i686-linux-gnu-gcc\" >> nim.cfg
          echo i386.windows.gcc.exe = \"i686-w64-mingw32-gcc.exe\" >> nim.cfg
          echo i386.windows.gcc.linkerexe = \"i686-w64-mingw32-gcc.exe\" >> nim.cfg
          if [ ${{ inputs.triple }} = 'aarch64-apple-darwin14' ]; then
            echo "--passC:\"-target arm64-apple-macos11\"" >> nim.cfg
            echo "--passL:\"-target arm64-apple-macos11\"" >> nim.cfg
            cat nim.cfg
            nimble build -d:release --cpu:arm64 --os:macosx
          else
            nimble build -d:release --cpu:${{ inputs.nim_cpu }}
          fi

      - name: Compress the Binaries
        run: |
          if [ ${{inputs.name}} = 'windows' ]; then
            EXEEXT=.exe
          else
            EXEEXT=
          fi
          if [ ${{ matrix.target.archive_format }} = 'zip' ]; then
            7z a -tzip ${{ inputs.module }}-${{ inputs.name }}-${{ inputs.cpu }}.zip ${{ inputs.module }}${EXEEXT}
          else
            tar -czvf ${{ inputs.module }}-${{ inputs.name }}-${{ inputs.cpu }}.tar.gz ${{ inputs.module }}${EXEEXT}
          fi

      - name: Upload the Nim Binaries (.zip)
        if: inputs.archive_format == 'zip'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.module }}-${{ inputs.name }}-${{ inputs.cpu }}.zip
          path: ${{ inputs.module }}-${{ inputs.name }}-${{ inputs.cpu }}.zip

      - name: Upload the Nim Binaries (.tar.gz)
        if: inputs.archive_format == 'tgz'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.module }}-${{ inputs.name }}-${{ inputs.cpu }}.tar.gz
          path: ${{ inputs.module }}-${{ inputs.name }}-${{ inputs.cpu }}.tar.gz

  create-macos-universal-binary:
    name: Create a Universal macOS binary
    needs: [build]
    runs-on: macos-11
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.module }}-macos-*.zip

      - name: Extract binaries for amd64-macos
        shell: bash
        run: |
          7z x ${{ inputs.module }}-macos-amd64.zip/${{ inputs.module }}-macos-amd64.zip
          mv ${{ inputs.module }} ${{ inputs.module }}-amd64

      - name: Extract binaries for arm64-macos
        shell: bash
        run: |
          7z x ${{ inputs.module }}-macos-arm64.zip/${{ inputs.module }}-macos-arm64.zip
          mv ${{ inputs.module }} ${{ inputs.module }}-arm64

      - name: Build Universal binary
        shell: bash
        run: |
          lipo -create -output ${{ inputs.module }} ${{ inputs.module }}-amd64 ${{ inputs.module }}-arm64

      - name: Compress the Nim Language Server binaries
        shell: bash
        run: |
          7z a -tzip ${{ inputs.module }}-macos-universal.zip ${{ inputs.module }}

      - name: Upload the Nim Language Server Binaries
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.module }}-macos-universal.zip
          path: ${{ inputs.module }}-macos-universal.zip
  
